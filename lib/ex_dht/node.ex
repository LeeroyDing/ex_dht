defmodule ExDHT.Node do
  use GenServer

  defstruct id: "", host: "", port: 0, trans: %{}, tokens: %{}, local_tokens: %{}, access_time: :os.system_time

  ## Public interface

  @spec start_link(String.t, integer, bitstring()) :: GenServer.on_start
  def start_link(host, port, id) do
    GenServer.start_link __MODULE__, {host, port, id}
  end

  @doc "Generate and add new transaction"
  @spec add_trans(pid(), String.t, bitstring()) :: :ok | :error
  def add_trans(self, name, info_hash \\ nil) do
    GenServer.call self, {:add_trans, name, info_hash}
  end

  @doc "Delete specified transaction"
  @spec delete_trans(pid(), bitstring()) :: :ok | :error
  def delete_trans(self, trans_id) do
    GenServer.call self, {:delete_trans, trans_id}
  end

  @doc "Adds a token for a given info hash as generated by this node"
  @spec add_token(pid(), bitstring(), bitstring()) :: :ok | :error
  def add_token(self, info_hash, token) do
    GenServer.call self, {:add_token, info_hash, token}
  end

  @doc "Returns token for the info hash, if known"
  @spec get_token(pid(), bitstring()) :: bitstring() | nil
  def get_token(self, info_hash) do
    GenServer.call self, {:get_token, info_hash}
  end

  @doc "Delete specified info hash's token"
  @spec delete_token(pid(), bitstring()) :: :ok | :error
  def delete_token(self, info_hash) do
    GenServer.call self, {:delete_token, info_hash}
  end

  @doc "Adds a locally created token for a given info hash for this node"
  @spec add_local_token(pid(), bitstring(), bitstring()) :: :ok | :error
  def add_local_token(self, info_hash, token) do
    GenServer.call self, {:add_local_token, info_hash, token}
  end

  @doc "Returns locally created token for the info hash, if known"
  @spec get_local_token(pid(), bitstring()) :: bitstring() | nil
  def get_local_token(self, info_hash) do
    GenServer.call self, {:get_local_token, info_hash}
  end

  @doc "Delete specified info hash's locally created token"
  @spec delete_local_token(pid(), bitstring()) :: :ok | :error
  def delete_local_token(self, info_hash) do
    GenServer.call self, {:delete_local_token, info_hash}
  end

  @doc "Update last access/modify time of this node"
  @spec update_access(pid(), integer) :: :ok | :error
  def update_access(self, system_time \\ nil) do
    system_time = case system_time do
                    nil -> :os.system_time
                    x -> x
                  end
    GenServer.call self, {:update_access, system_time}
  end

  ## Server callback
  
end
